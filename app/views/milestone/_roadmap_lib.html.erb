<script>

// 카테고리의 색상 가져오기 함수 (안전한 접근)
function getCategoryColor(categoryName) {
  if (!categoryName || typeof categoryName !== 'string') {
    return null;
  }
  
  // categoryColors 객체가 안전하게 존재하는지 확인
  if (typeof categoryColors === 'undefined' || categoryColors === null) {
    console.warn('⚠️ categoryColors 객체가 초기화되지 않음');
    categoryColors = {};
    return null;
  }
  
  return categoryColors[categoryName] || null;
}

// 사이드바 프로젝트 정보 업데이트 (스케줄 개수만 표시)
  function updateSidebarProjectInfo($projectBar, dates) {
    var projectName = $projectBar.text().trim();
    
    // 사이드바에서 해당 프로젝트 찾기
    $('.project-item').each(function() {
      if ($(this).find('.project-name').text().trim() === projectName) {
        // 해당 이벤트의 스케줄 개수 계산
        var categoryIndex = $(this).data('category-index');
        var categoryHeader = $('.category-header[data-category-index="' + categoryIndex + '"]');
        var categoryName = categoryHeader.find('.category-title').text().trim();
        var timelineRow = $('.timeline-row[data-event-name="' + projectName + '"][data-category-name="' + categoryName + '"]');
        var scheduleCount = timelineRow.find('.project-bar').length;
        
        $(this).find('.project-info').text(scheduleCount + '개 스케줄');
        return false; // 찾았으면 반복 중단
      }
    });
  }

  // 프로젝트 날짜 계산 함수 (드래그용)
  function calculateProjectDates($projectBar, leftPosition) {
    var startDate = new Date(<%= start_date.to_time.to_i * 1000 %>);
    var daysOffset = Math.floor(leftPosition / cellWidth); // 바닥함수로 셀 시작점 기준 계산
    
    // 시작일 계산
    var projectStartDate = new Date(startDate.getTime() + (daysOffset * 24 * 60 * 60 * 1000));
    
    // 프로젝트 기간 계산 (바의 너비 기준)
    var durationDays = Math.round($projectBar.width() / cellWidth); // 너비는 반올림 사용
    var projectEndDate = new Date(projectStartDate.getTime() + (durationDays * 24 * 60 * 60 * 1000));  // 종료일 미포함 방식
    
    return {
      startDate: projectStartDate,
      endDate: projectEndDate
    };
  }

  // 프로젝트 날짜 계산 함수 (리사이즈용)
  function calculateProjectDatesFromResize($projectBar, leftPosition, width) {
    var startDate = new Date(<%= start_date.to_time.to_i * 1000 %>);
    var daysOffset = Math.floor(leftPosition / cellWidth); // 바닥함수로 셀 시작점 기준 계산
    
    // 시작일 계산
    var projectStartDate = new Date(startDate.getTime() + (daysOffset * 24 * 60 * 60 * 1000));
    
    // 프로젝트 기간 계산 (리사이즈된 너비 기준)
    var durationDays = Math.round(width / cellWidth); // 너비는 반올림 사용
    var projectEndDate = new Date(projectStartDate.getTime() + (durationDays * 24 * 60 * 60 * 1000));  // 종료일 미포함 방식

    return {
      startDate: projectStartDate,
      endDate: projectEndDate
    };
  }

// 드래그 중 날짜 표시 업데이트
function updateProjectDates($projectBar, leftPosition) {
  var dates = calculateProjectDates($projectBar, leftPosition);
  
  // 현지 시간대 기준으로 YYYY-MM-DD 형식 변환
  var startDateStr = formatLocalDate(dates.startDate);
  var endDateStr = formatLocalDate(dates.endDate);
  
  $projectBar.attr('title', 
    $projectBar.text() + ' (' + startDateStr + ' ~ ' + endDateStr + ')'
  );
}

// 리사이즈 중 날짜 표시 업데이트
function updateProjectDatesFromResize($projectBar, leftPosition, width) {
  var dates = calculateProjectDatesFromResize($projectBar, leftPosition, width);
  
  // 현지 시간대 기준으로 YYYY-MM-DD 형식 변환
  var startDateStr = formatLocalDate(dates.startDate);
  var endDateStr = formatLocalDate(dates.endDate);
  
  $projectBar.attr('title', 
    $projectBar.text() + ' (' + startDateStr + ' ~ ' + endDateStr + ')'
  );
}

// 날짜를 현지 시간대 기준 YYYY-MM-DD 형식으로 변환하는 헬퍼 함수
function formatLocalDate(date) {
  var year = date.getFullYear();
  var month = ('0' + (date.getMonth() + 1)).slice(-2);
  var day = ('0' + date.getDate()).slice(-2);
  return year + '-' + month + '-' + day;
}

// YYYY-MM-DD 문자열을 현지 시간대 기준 Date 객체로 변환하는 헬퍼 함수
function parseLocalDate(dateString) {
  var parts = dateString.split('-');
  if (parts.length !== 3) {
    return new Date(dateString); // fallback
  }
  // 현지 시간대로 파싱 (UTC가 아닌)
  return new Date(parseInt(parts[0]), parseInt(parts[1]) - 1, parseInt(parts[2]));
}

// 모든 로드맵 데이터 삭제 함수
  function clearAllRoadmapData() {
    console.log('기존 로드맵 데이터 삭제 시작');
    
    // 타임라인 행들 삭제 (오늘 표시선 제외)
    $('.timeline-row').remove();
    
    // 사이드바 카테고리와 프로젝트 삭제
    $('.category-header, .project-item').remove();
    
    console.log('기존 로드맵 데이터 삭제 완료');
  }

  // 불러온 데이터 적용 함수
  function applyImportedData(importData) {
    console.log('불러온 데이터 적용 시작');

    // 컬러 정보 초기화
    categoryColors = {};
    scheduleColors = {};    
    currentRoadmapName = importData.metadata.name;

    // 컬러 정보 복원
    importData.categories.forEach(function(categoryData, categoryIndex) {
      // 카테고리 커스텀 색상 정보 복원
      if (categoryData.customColor) {
        categoryColors[categoryData.name] = categoryData.customColor;
      }

      // 이벤트들 추가
      categoryData.events.forEach(function(eventData) {
        // 스케줄들 추가
        eventData.schedules.forEach(function(scheduleData, scheduleIndex) {
          // 스케쥴 컬러 정보 복원
          if (scheduleData.customColor) {
            scheduleColors[eventData.name + '_' + scheduleIndex] = scheduleData.customColor;
          }
        });
      });
    });
    
    importData.categories.forEach(function(categoryData, categoryIndex) {     
      
      // 카테고리 추가
      var newCategoryHtml = '<div class="category-header" data-category-index="' + categoryIndex + '">' +
        '<div class="category-left">' +
          '<button class="category-toggle-btn" type="button">▼</button>' +
          '<span class="category-title">' + categoryData.name + '</span>' +
        '</div>' +
        '<div class="category-actions">' +
          '<button class="category-btn add-event-btn" type="button" title="이벤트 추가">+</button>' +
          '<button class="category-btn edit-category-btn" type="button" title="이름 변경">✏</button>' +
          '<button class="category-btn color-category-btn" type="button" title="색상 변경">🎨</button>' +
          '<button class="category-btn delete-category-btn" type="button" title="카테고리 삭제">×</button>' +
        '</div>' +
      '</div>';
      
              $('.sidebar-content').append(newCategoryHtml);
        
        // 타임라인에 카테고리 행 추가 (카테고리 행은 클릭 불가)
        var categoryCellsHtml = '';
        <% days.each do |day| %>
          categoryCellsHtml += '<div class="timeline-cell" style="width: <%= cell_width %>px;"></div>';
        <% end %>
        
        var categoryRowHtml = '<div class="timeline-row category-row" data-category-name="' + categoryData.name + '">' +
          '<div class="timeline-grid">' + categoryCellsHtml + '</div>' +
          '</div>';
        
        $('.timeline-body').append(categoryRowHtml);
        
        // 이벤트들 추가
        categoryData.events.forEach(function(eventData) {
          // 사이드바에 이벤트 추가
          var eventHtml = '<div class="project-item" data-category-index="' + categoryIndex + '">' +
            '<div class="event-content">' +
              '<div class="project-name">' + eventData.name.replace(/\n/g, '<br>') + '</div>' +
              '<div class="project-info">' + eventData.schedules.length + '개 스케줄</div>' +
            '</div>' +
            '<form class="event-edit-form">' +
              '<textarea class="event-edit-input">' + eventData.name + '</textarea>' +
            '</form>' +
            '<div class="event-actions">' +
              '<button class="event-btn edit-event-btn" title="편집">✏️</button>' +
              '<button class="event-btn delete-event-btn" title="삭제">🗑️</button>' +
            '</div>' +
            '<div class="event-edit-actions">' +
              '<button class="event-btn save-event-btn" title="저장">✓</button>' +
              '<button class="event-btn cancel-event-btn" title="취소">✕</button>' +
            '</div>' +
          '</div>';
          
          $('.sidebar-content').append(eventHtml);
        
          // 타임라인에 이벤트 행 추가 (이벤트 행은 클릭 가능)
          var eventCellsHtml = '';
          <% days.each_with_index do |day, index| %>
            eventCellsHtml += '<div class="timeline-cell schedule-add-target" style="width: <%= cell_width %>px;" data-date="<%= day[:date].strftime('%Y-%m-%d') %>"></div>';
          <% end %>
          
          var eventRowHtml = '<div class="timeline-row" data-event-name="' + eventData.name + '" data-category-name="' + categoryData.name + '">' +
            '<div class="timeline-grid">' + eventCellsHtml + '</div>' +
            '</div>';
        
        $('.timeline-body').append(eventRowHtml);
        
        var timelineRow = $('.timeline-row').last();
        
        // 스케줄들 추가
        eventData.schedules.forEach(function(scheduleData, scheduleIndex) {
          if (scheduleData.startDate && scheduleData.endDate) {
            var startDate = new Date(<%= start_date.to_time.to_i * 1000 %>);
            var scheduleStartDate = parseLocalDate(scheduleData.startDate);
            var scheduleEndDate = parseLocalDate(scheduleData.endDate);
            
            var projectStartDays = Math.round((scheduleStartDate - startDate) / (1000 * 60 * 60 * 24));
            var projectDurationDays = Math.round((scheduleEndDate - scheduleStartDate) / (1000 * 60 * 60 * 24));
            var barLeft = projectStartDays * <%= cell_width %>;
            var barWidth = projectDurationDays * <%= cell_width %>;
            var totalWidth = <%= total_width %>;
            
            // 표시 범위 내에 있는 경우만 바 생성
            if (barLeft >= -barWidth && barLeft <= totalWidth) {
              // 색상 확인 (개별 색상 > 카테고리 색상)
              var scheduleKey = eventData.name + '_' + scheduleIndex;
              var scheduleColor = scheduleData.customColor || scheduleColors[scheduleKey];
              var categoryColor = getCategoryColor(categoryData.name);
              var appliedColor = scheduleColor || categoryColor;
              
              var barClass = appliedColor ? 'project-bar custom-color' : 'project-bar issue-' + scheduleData.issue;
              var barStyle = 'position: absolute; top: 2px; left: ' + Math.max(0, barLeft) + 'px; width: ' + Math.min(barWidth, totalWidth - Math.max(0, barLeft)) + 'px; z-index: ' + (101 + scheduleIndex) + ';';
              
              if (appliedColor) {
                barStyle += ' background-color: ' + appliedColor + ';';
              }
              
              // 이슈 링크 아이콘 HTML (공통 함수 사용)
              var issueLinkIcon = generateIssueLinkIcon(scheduleData.issue);
              
              var scheduleBarHtml = '<div class="' + barClass + '" ' +
                'style="' + barStyle + '" ' +
                'title="' + scheduleData.name + ' (' + scheduleData.startDate + ' ~ ' + scheduleData.endDate + ')" ' +
                'data-schedule-index="' + scheduleIndex + '" ' +
                'data-issue-number="' + scheduleData.issue + '" ' +
                'data-done-ratio="' + (scheduleData.doneRatio || '') + '">' +
                '<span class="project-bar-text">' + (scheduleData.name.length > 20 ? scheduleData.name.substring(0, 20) + '...' : scheduleData.name).replace(/\n/g, '<br>') + '</span>' +
                issueLinkIcon +
                '</div>';
              
              timelineRow.append(scheduleBarHtml);
            }
          }
        });
      });
    });
    
    // 이벤트 및 카테고리 드래그 앤 드롭 기능 먼저 초기화 (최초 접속시와 동일한 순서)
    initializeEventDragAndDrop();
    initializeCategoryDragAndDrop();
    
    // 드래그 기능 재초기화 (마지막에)
    initializeProjectBarDraggable();
    
    // 라인 높이 업데이트 (딜레이 후 실행)
    setTimeout(function() {
      updateLineHeight();
    }, 100);
    
    console.log('불러온 데이터 적용 완료');
  }

  // 이슈 링크 아이콘 HTML 생성 함수 (공통)
  function generateIssueLinkIcon(issueNumber) {
    if (!issueNumber || issueNumber.trim() === '') {
      return '';
    }
    
    return '<a href="/issues/' + issueNumber + '" class="issue-link-icon" target="_blank" title="" data-issue-tooltip="' + issueNumber + '">' +
      '<span class="issue-link-symbol">🔗</span>' +
      '</a>';
  }

  // 기존 스케쥴바들에 이슈 링크 아이콘 추가하는 함수
  function addIssueLinkIconsToExistingBars() {
    $('.project-bar').each(function() {
      var $bar = $(this);
      var issueNumber = $bar.attr('data-issue-number');
      
      // 이미 이슈 링크 아이콘이 있거나 이슈 번호가 없으면 스킵
      if ($bar.find('.issue-link-icon').length > 0 || !issueNumber || issueNumber.trim() === '') {
        return;
      }
      
      // 공통 함수를 사용하여 이슈 링크 아이콘 추가
      var issueLinkIcon = generateIssueLinkIcon(issueNumber);
      $bar.append(issueLinkIcon);
    });
  }


// 특정 행의 프로젝트 바 드래그/리사이즈 기능 초기화
  function initializeProjectBarDraggableForRow($row) {
    if (!$row || $row.length === 0) return;
    
    var $projectBars = $row.find('.project-bar');
    console.log('새 행의 프로젝트 바 개수:', $projectBars.length);
    
    // 각 프로젝트 바에 z-index 재설정 (혹시 누락된 경우)
    $projectBars.each(function(index) {
      var $bar = $(this);
      if (!$bar.data('schedule-index')) {
        $bar.attr('data-schedule-index', index);
      }
      
      // z-index가 인라인 스타일에 없으면 추가
      var currentStyle = $bar.attr('style') || '';
      if (currentStyle.indexOf('z-index') === -1) {
        var zIndex = 101 + index;
        $bar.attr('style', currentStyle + '; z-index: ' + zIndex + ';');
      }
    });
    
    applyDraggableToElements($projectBars);
  }

  // 프로젝트 바 드래그 및 리사이즈 기능 초기화
  function initializeProjectBarDraggable() {
    // 기존 드래그/리사이즈 기능 제거 (이미 초기화된 것들만)
    $('.project-bar').each(function() {
      if ($(this).hasClass('ui-draggable')) {
        $(this).draggable('destroy');
      }
      if ($(this).hasClass('ui-resizable')) {
        $(this).resizable('destroy');
      }
    });
    
    // 모든 프로젝트 바에 드래그/리사이즈 기능 적용
    applyDraggableToElements($('.project-bar'));
  }

  // 프로젝트 바 요소들에 드래그/리사이즈 기능 적용
  function applyDraggableToElements($elements) {
    if (!$elements || $elements.length === 0) return;
    
    console.log('드래그/리사이즈 기능 적용 대상:', $elements.length, '개 요소');
    
    // 리사이즈 기능 추가 (양쪽 끝 드래그로 크기 조정)
    $elements.resizable({
      handles: 'e, w', // 동쪽(우측), 서쪽(좌측) 핸들만 활성화
      grid: [<%= cell_width %>, 0], // 일 단위로 스냅
      minWidth: <%= cell_width %>, // 최소 1일 크기
      containment: '.timeline-body',
      start: function(event, ui) {
        $(this).addClass('ui-resizable-resizing');
        // 리사이즈 시작 위치와 크기 저장
        $(this).data('startLeft', ui.position.left);
        $(this).data('startWidth', ui.size.width);
      },
      resize: function(event, ui) {
        // 리사이즈 중 날짜 업데이트
        updateProjectDatesFromResize($(this), ui.position.left, ui.size.width);
      },
      stop: function(event, ui) {
        $(this).removeClass('ui-resizable-resizing');
        
        // 최종 크기와 위치에서의 날짜 계산 및 업데이트
        var finalDates = calculateProjectDatesFromResize($(this), ui.position.left, ui.size.width);
        var projectId = $(this).data('project-id');
        
        console.log('프로젝트 리사이즈 완료:', {
          id: projectId,
          startDate: finalDates.startDate,
          endDate: finalDates.endDate
        });
        
        // 사이드바의 프로젝트 정보도 업데이트
        updateSidebarProjectInfo($(this), finalDates);
      }
    });
    
    // 드래그 기능 추가 (중앙 부분 드래그로 이동)
    $elements.draggable({
      axis: 'x', // x축으로만 드래그 가능
      grid: [<%= cell_width %>, 0], // 일 단위로 스냅
      containment: '.timeline-body', // 타임라인 영역 내에서만 드래그 가능
      cancel: '.ui-resizable-handle', // 리사이즈 핸들에서는 드래그 비활성화
      start: function(event, ui) {
        $(this).addClass('ui-draggable-dragging');
        // 시작 위치 저장
        $(this).data('startLeft', ui.position.left);
      },
      drag: function(event, ui) {
        // 드래그 중 위치에 따른 날짜 업데이트
        updateProjectDates($(this), ui.position.left);
      },
      stop: function(event, ui) {
        $(this).removeClass('ui-draggable-dragging');
        
        // 최종 위치에서의 날짜 계산 및 업데이트
        var finalDates = calculateProjectDates($(this), ui.position.left);
        var projectId = $(this).data('project-id');
        
        console.log('프로젝트 이동 완료:', {
          id: projectId,
          startDate: finalDates.startDate,
          endDate: finalDates.endDate
        });
        
        // 사이드바의 프로젝트 정보도 업데이트
        updateSidebarProjectInfo($(this), finalDates);
      }
    });
  }

  // 이벤트 드래그 앤 드롭 기능 초기화
  function initializeEventDragAndDrop() {
    console.log('이벤트 드래그 앤 드롭 기능 초기화');
    
    var dragStartData = null;
    var dragHelper = null;
    
    // 이벤트 아이템에 드래그 기능 추가
    $(document).on('mousedown', '.project-item .event-content', function(e) {
      // 편집 모드에서는 드래그 비활성화
      if ($(this).closest('.project-item').hasClass('editing')) {
        return;
      }
      
      // 오른쪽 클릭 무시
      if (e.which !== 1) {
        return;
      }
      
      var eventItem = $(this).closest('.project-item');
      var eventName = eventItem.find('.project-name').text().trim();
      var sourceCategoryIndex = eventItem.data('category-index');
      
      dragStartData = {
        eventItem: eventItem,
        eventName: eventName,
        sourceCategoryIndex: sourceCategoryIndex,
        startX: e.pageX,
        startY: e.pageY,
        isDragging: false
      };
      
      console.log('드래그 시작 준비:', dragStartData);
      
      // 전역 마우스 이벤트 추가
      $(document).on('mousemove.eventDrag', handleMouseMove);
      $(document).on('mouseup.eventDrag', handleMouseUp);
      
      e.preventDefault();
    });
    
    function handleMouseMove(e) {
      if (!dragStartData) return;
      
      var deltaX = Math.abs(e.pageX - dragStartData.startX);
      var deltaY = Math.abs(e.pageY - dragStartData.startY);
      
      // 드래그 시작 임계값 확인
      if (!dragStartData.isDragging && (deltaX > 5 || deltaY > 5)) {
        startDrag(e);
      }
      
      if (dragStartData.isDragging) {
        updateDragPosition(e);
        updateDropZones(e);
      }
    }
    
    function handleMouseUp(e) {
      if (dragStartData && dragStartData.isDragging) {
        finishDrag(e);
      }
      
      // 전역 이벤트 제거
      $(document).off('mousemove.eventDrag');
      $(document).off('mouseup.eventDrag');
      
      dragStartData = null;
    }
    
    function startDrag(e) {
      console.log('드래그 시작:', dragStartData.eventName);
      
      dragStartData.isDragging = true;
      dragStartData.eventItem.addClass('dragging');
      
      // 드래그 헬퍼 생성
      dragHelper = $('<div class="project-item drag-helper">' + 
                     '<div class="event-content">' +
                     '<div class="project-name">' + dragStartData.eventName + '</div>' +
                     '</div>' +
                     '</div>');
      
      $('body').append(dragHelper);
      updateDragPosition(e);
      
      // 드롭 존 활성화
      // 1. 다른 카테고리 헤더들을 드롭 존으로 설정
      $('.category-header').not('[data-category-index="' + dragStartData.sourceCategoryIndex + '"]')
                          .addClass('drop-zone');
      
      // 2. 같은 카테고리 내의 다른 이벤트들을 드롭 존으로 설정
      $('.project-item[data-category-index="' + dragStartData.sourceCategoryIndex + '"]')
                          .not(dragStartData.eventItem)
                          .addClass('drop-zone');
    }
    
    function updateDragPosition(e) {
      if (dragHelper) {
        dragHelper.css({
          left: e.pageX + 10,
          top: e.pageY - 10
        });
      }
    }
    
    function updateDropZones(e) {
      // 현재 마우스 위치의 드롭 존 찾기
      var categoryDropTarget = $(e.target).closest('.category-header.drop-zone');
      var eventDropTarget = $(e.target).closest('.project-item.drop-zone');
      
      // 모든 드롭 존에서 hover 효과 제거
      $('.category-header.drop-zone').removeClass('drop-zone-hover');
      $('.project-item.drop-zone').removeClass('drop-zone-hover');
      
      // 현재 위치의 드롭 존에 hover 효과 추가 및 헬퍼 텍스트 업데이트
      if (categoryDropTarget.length > 0) {
        categoryDropTarget.addClass('drop-zone-hover');
        updateDragHelperText('카테고리 이동');
      } else if (eventDropTarget.length > 0) {
        eventDropTarget.addClass('drop-zone-hover');
        updateDragHelperText('순서 변경');
      } else {
        updateDragHelperText('이동');
      }
    }
    
    function updateDragHelperText(action) {
      if (dragHelper) {
        var helperText = dragHelper.find('.drag-helper-action');
        if (helperText.length === 0) {
          dragHelper.append('<div class="drag-helper-action" style="font-size: 10px; color: #666; margin-top: 2px;"></div>');
          helperText = dragHelper.find('.drag-helper-action');
        }
        helperText.text(action);
      }
    }
    
    function finishDrag(e) {
      console.log('드래그 완료');
      
      // 드롭 타겟 찾기
      var categoryDropTarget = $(e.target).closest('.category-header.drop-zone');
      var eventDropTarget = $(e.target).closest('.project-item.drop-zone');
      
      if (categoryDropTarget.length > 0) {
        // 카테고리 헤더에 드롭 - 다른 카테고리로 이동
        var targetCategoryIndex = categoryDropTarget.data('category-index');
        
        if (targetCategoryIndex != dragStartData.sourceCategoryIndex) {
          try {
            moveEventToCategory(dragStartData.eventItem, dragStartData.sourceCategoryIndex, targetCategoryIndex);
          } catch (error) {
            console.error('이벤트 이동 중 오류 발생:', error);
            alert('이벤트 이동 중 오류가 발생했습니다. 페이지를 새로고침해주세요.');
          }
        } else {
          console.log('같은 카테고리로 이동 시도 - 무시');
        }
      } else if (eventDropTarget.length > 0) {
        // 이벤트 아이템에 드롭 - 같은 카테고리 내 순서 변경
        var targetEventCategoryIndex = eventDropTarget.data('category-index');
        
        if (targetEventCategoryIndex == dragStartData.sourceCategoryIndex) {
          try {
            reorderEventInCategory(dragStartData.eventItem, eventDropTarget);
          } catch (error) {
            console.error('이벤트 순서 변경 중 오류 발생:', error);
            alert('이벤트 순서 변경 중 오류가 발생했습니다. 페이지를 새로고침해주세요.');
          }
        } else {
          console.log('다른 카테고리의 이벤트에 드롭 - 무시');
        }
      }
      
      // 정리
      cleanup();
    }
    
    function cleanup() {
      if (dragHelper) {
        dragHelper.remove();
        dragHelper = null;
      }
      
      $('.project-item').removeClass('dragging');
      $('.category-header').removeClass('drop-zone drop-zone-hover');
      $('.project-item').removeClass('drop-zone drop-zone-hover');
    }
    
    function moveEventToCategory(eventItem, sourceCategoryIndex, targetCategoryIndex) {
      console.log('이벤트 카테고리 이동:', sourceCategoryIndex, '->', targetCategoryIndex);
      
      var eventName = eventItem.find('.project-name').text().trim();
      var targetCategoryHeader = $('.category-header[data-category-index="' + targetCategoryIndex + '"]');
      var sourceCategoryHeader = $('.category-header[data-category-index="' + sourceCategoryIndex + '"]');
      
      if (targetCategoryHeader.length === 0) {
        console.error('타겟 카테고리를 찾을 수 없습니다');
        return;
      }
      
      // 원본 카테고리와 타겟 카테고리 이름 가져오기
      var sourceCategoryName = sourceCategoryHeader.find('.category-title').text().trim();
      var targetCategoryName = targetCategoryHeader.find('.category-title').text().trim();
      
      console.log('카테고리 이름:', sourceCategoryName, '->', targetCategoryName);
      
      // 1. 사이드바에서 이벤트 아이템 이동
      var newEventItem = eventItem.clone();
      newEventItem.attr('data-category-index', targetCategoryIndex);
      
      // 타겟 카테고리의 마지막 이벤트 다음에 삽입
      var targetCategoryEvents = $('.project-item[data-category-index="' + targetCategoryIndex + '"]');
      if (targetCategoryEvents.length > 0) {
        targetCategoryEvents.last().after(newEventItem);
      } else {
        targetCategoryHeader.after(newEventItem);
      }
      
      // 2. 타임라인에서 해당 이벤트의 모든 행 찾기
      var originalTimelineRows = $('.timeline-row[data-category-name="' + sourceCategoryName + '"][data-event-name="' + eventName + '"]');
      console.log('이동할 타임라인 행 개수:', originalTimelineRows.length);
      
      // 3. 타임라인 행들을 새로운 위치로 이동
      if (originalTimelineRows.length > 0) {
        // 타겟 카테고리에서 이벤트 삽입 위치 찾기
        var insertPosition = findTimelineInsertPosition(targetCategoryIndex, eventName);
        
        // 각 행을 새로운 위치로 이동하고 데이터 속성 업데이트
        originalTimelineRows.each(function() {
          var $row = $(this);
          $row.attr('data-category-name', targetCategoryName);
          
          // 행을 새로운 위치로 이동
          if (insertPosition && insertPosition.length > 0) {
            $row.detach().insertAfter(insertPosition);
            insertPosition = $row; // 다음 행은 현재 행 다음에 삽입
          } else {
            // 삽입 위치를 찾지 못한 경우 타임라인 끝에 추가
            $row.detach().appendTo('.timeline-body');
          }
        });
      }
      
      // 4. 원본 이벤트 아이템 제거
      eventItem.remove();
      
      // 5. 프로젝트 바 드래그 기능 재초기화
      initializeProjectBarDraggable();
      
      // 6. 라인 높이 업데이트
      updateLineHeight();
      
      console.log('이벤트 이동 완료:', eventName);
    }
    
    // 같은 카테고리 내에서 이벤트 순서 변경
    function reorderEventInCategory(sourceEventItem, targetEventItem) {
      console.log('이벤트 순서 변경 시작');
      
      var sourceEventName = sourceEventItem.find('.project-name').text().trim();
      var targetEventName = targetEventItem.find('.project-name').text().trim();
      var categoryIndex = sourceEventItem.data('category-index');
      var categoryName = $('.category-header[data-category-index="' + categoryIndex + '"]')
                         .find('.category-title').text().trim();
      
      console.log('순서 변경:', sourceEventName, '->', targetEventName, '(카테고리:', categoryName + ')');
      
      // 1. 사이드바에서 이벤트 순서 변경
      var sourceIndex = sourceEventItem.index();
      var targetIndex = targetEventItem.index();
      
      console.log('사이드바 인덱스:', sourceIndex, '->', targetIndex);
      
      if (sourceIndex < targetIndex) {
        // 아래쪽으로 이동 - 타겟 요소 다음에 삽입
        sourceEventItem.detach().insertAfter(targetEventItem);
      } else {
        // 위쪽으로 이동 - 타겟 요소 이전에 삽입
        sourceEventItem.detach().insertBefore(targetEventItem);
      }
      
      // 2. 타임라인에서 해당 이벤트의 모든 행 찾기
      var sourceTimelineRows = $('.timeline-row[data-category-name="' + categoryName + '"][data-event-name="' + sourceEventName + '"]');
      var targetTimelineRows = $('.timeline-row[data-category-name="' + categoryName + '"][data-event-name="' + targetEventName + '"]');
      
      console.log('타임라인 행 개수 - 소스:', sourceTimelineRows.length, '타겟:', targetTimelineRows.length);
      
      // 3. 타임라인에서 이벤트 행 순서 변경
      if (sourceTimelineRows.length > 0 && targetTimelineRows.length > 0) {
        var targetLastRow = targetTimelineRows.last();
        var targetFirstRow = targetTimelineRows.first();
        
        if (sourceIndex < targetIndex) {
          // 아래쪽으로 이동 - 타겟 이벤트의 마지막 행 다음에 삽입
          sourceTimelineRows.each(function() {
            $(this).detach().insertAfter(targetLastRow);
            targetLastRow = $(this); // 다음 행은 현재 행 다음에 삽입
          });
        } else {
          // 위쪽으로 이동 - 타겟 이벤트의 첫 번째 행 이전에 삽입
          sourceTimelineRows.get().reverse().forEach(function(row) {
            $(row).detach().insertBefore(targetFirstRow);
          });
        }
      }
      
      // 4. 라인 높이 업데이트
      updateLineHeight();
      
      console.log('이벤트 순서 변경 완료:', sourceEventName);
    }
    
    // 타임라인에서 새 이벤트 행의 삽입 위치를 찾는 함수
    function findTimelineInsertPosition(categoryIndex, eventName) {
      var categoryName = $('.category-header[data-category-index="' + categoryIndex + '"]')
                         .find('.category-title').text().trim();
      
      console.log('타임라인 삽입 위치 찾기:', categoryName, eventName);
      
      // 해당 카테고리의 기존 타임라인 행들 찾기
      var categoryTimelineRows = $('.timeline-row[data-category-name="' + categoryName + '"]');
      console.log('기존 카테고리 타임라인 행 개수:', categoryTimelineRows.length);
      
      if (categoryTimelineRows.length > 0) {
        return categoryTimelineRows.last();
      }
      
      // 카테고리 행이 없는 경우, 사이드바 순서를 기반으로 삽입 위치 찾기
      var allTimelineRows = $('.timeline-row');
      var sidebarElements = $('.roadmap-sidebar').children().not('.sidebar-header');
      
      // 타겟 카테고리의 사이드바 위치 찾기
      var targetCategoryPosition = -1;
      sidebarElements.each(function(index) {
        if ($(this).hasClass('category-header') && 
            $(this).data('category-index') == categoryIndex) {
          targetCategoryPosition = index;
          return false; // break
        }
      });
      
      console.log('타겟 카테고리 위치:', targetCategoryPosition);
      
      if (targetCategoryPosition >= 0) {
        // 타겟 카테고리 이전 요소들 중에서 마지막 타임라인 행 찾기
        var insertAfterRow = null;
        var timelineIndex = 0;
        
        for (var i = 0; i < targetCategoryPosition; i++) {
          var sidebarElement = sidebarElements.eq(i);
          if (sidebarElement.hasClass('category-header') || sidebarElement.hasClass('project-item')) {
            if (timelineIndex < allTimelineRows.length) {
              insertAfterRow = allTimelineRows.eq(timelineIndex);
              timelineIndex++;
            }
          }
        }
        
        console.log('삽입 위치 (이전 행):', insertAfterRow ? insertAfterRow.index() : 'none');
        return insertAfterRow;
      }
      
      // 마지막 수단으로 타임라인 끝에 삽입
      console.log('마지막 수단: 타임라인 끝에 삽입');
      return allTimelineRows.last();
    }
  }

  // 카테고리 드래그 앤 드롭 기능 초기화
  function initializeCategoryDragAndDrop() {
    console.log('카테고리 드래그 앤 드롭 기능 초기화');
    
    var categoryDragData = null;
    var categoryDragHelper = null;
    
    // 카테고리 헤더에 드래그 기능 추가
    $(document).on('mousedown', '.category-header .category-title', function(e) {
      // 편집 모드에서는 드래그 비활성화
      if ($(this).closest('.category-header').hasClass('editing')) {
        return;
      }
      
      // 오른쪽 클릭 무시
      if (e.which !== 1) {
        return;
      }
      
      var categoryHeader = $(this).closest('.category-header');
      var categoryName = $(this).text().trim();
      var categoryIndex = categoryHeader.data('category-index');
      
      categoryDragData = {
        categoryHeader: categoryHeader,
        categoryName: categoryName,
        categoryIndex: categoryIndex,
        startX: e.pageX,
        startY: e.pageY,
        isDragging: false
      };
      
      console.log('카테고리 드래그 시작 준비:', categoryDragData);
      
      // 전역 마우스 이벤트 추가
      $(document).on('mousemove.categoryDrag', handleCategoryMouseMove);
      $(document).on('mouseup.categoryDrag', handleCategoryMouseUp);
      
      e.preventDefault();
    });
    
    function handleCategoryMouseMove(e) {
      if (!categoryDragData) return;
      
      var deltaX = Math.abs(e.pageX - categoryDragData.startX);
      var deltaY = Math.abs(e.pageY - categoryDragData.startY);
      
      // 드래그 시작 임계값 확인
      if (!categoryDragData.isDragging && (deltaX > 5 || deltaY > 5)) {
        startCategoryDrag(e);
      }
      
      if (categoryDragData.isDragging) {
        updateCategoryDragPosition(e);
        updateCategoryDropZones(e);
      }
    }
    
    function handleCategoryMouseUp(e) {
      if (categoryDragData && categoryDragData.isDragging) {
        finishCategoryDrag(e);
      }
      
      // 전역 이벤트 제거
      $(document).off('mousemove.categoryDrag');
      $(document).off('mouseup.categoryDrag');
      
      categoryDragData = null;
    }
    
    function startCategoryDrag(e) {
      console.log('카테고리 드래그 시작:', categoryDragData.categoryName);
      
      categoryDragData.isDragging = true;
      categoryDragData.categoryHeader.addClass('dragging');
      
      // 드래그 헬퍼 생성
      categoryDragHelper = $('<div class="category-header drag-helper">' + 
                            '<div class="category-left">' +
                            '<span class="category-title">' + categoryDragData.categoryName + '</span>' +
                            '</div>' +
                            '</div>');
      
      $('body').append(categoryDragHelper);
      updateCategoryDragPosition(e);
      
      // 드롭 존 활성화 - 다른 카테고리들을 드롭 존으로 설정
      $('.category-header').not(categoryDragData.categoryHeader).addClass('category-drop-zone');
    }
    
    function updateCategoryDragPosition(e) {
      if (categoryDragHelper) {
        categoryDragHelper.css({
          left: e.pageX + 10,
          top: e.pageY - 10
        });
      }
    }
    
    function updateCategoryDropZones(e) {
      // 현재 마우스 위치의 드롭 존 찾기
      var dropTarget = $(e.target).closest('.category-header.category-drop-zone');
      
      // 모든 드롭 존에서 hover 효과 제거
      $('.category-header.category-drop-zone').removeClass('category-drop-zone-hover');
      
      // 현재 위치의 드롭 존에 hover 효과 추가
      if (dropTarget.length > 0) {
        dropTarget.addClass('category-drop-zone-hover');
        
        // 드롭 위치 표시 (위/아래)
        var dropY = e.pageY - dropTarget.offset().top;
        var dropHeight = dropTarget.outerHeight();
        
        if (dropY < dropHeight / 2) {
          dropTarget.removeClass('drop-after').addClass('drop-before');
        } else {
          dropTarget.removeClass('drop-before').addClass('drop-after');
        }
      }
    }
    
    function finishCategoryDrag(e) {
      console.log('카테고리 드래그 완료');
      
      // 드롭 타겟 찾기
      var dropTarget = $(e.target).closest('.category-header.category-drop-zone');
      
      if (dropTarget.length > 0) {
        var targetIndex = dropTarget.data('category-index');
        
        // 드롭 위치 확인 (위/아래)
        var dropY = e.pageY - dropTarget.offset().top;
        var dropHeight = dropTarget.outerHeight();
        var insertBefore = dropY < dropHeight / 2;
        
        try {
          reorderCategory(categoryDragData.categoryHeader, dropTarget, insertBefore);
        } catch (error) {
          console.error('카테고리 순서 변경 중 오류 발생:', error);
          alert('카테고리 순서 변경 중 오류가 발생했습니다. 페이지를 새로고침해주세요.');
        }
      }
      
      // 정리
      cleanupCategoryDrag();
    }
    
    function cleanupCategoryDrag() {
      if (categoryDragHelper) {
        categoryDragHelper.remove();
        categoryDragHelper = null;
      }
      
      $('.category-header').removeClass('dragging category-drop-zone category-drop-zone-hover drop-before drop-after');
    }
    
    // 카테고리 순서 변경 함수
    function reorderCategory(sourceCategory, targetCategory, insertBefore) {
      console.log('카테고리 순서 변경 시작');
      
      var sourceName = sourceCategory.find('.category-title').text().trim();
      var targetName = targetCategory.find('.category-title').text().trim();
      var sourceIndex = sourceCategory.data('category-index');
      var targetIndex = targetCategory.data('category-index');
      
      console.log('순서 변경:', sourceName, '→', targetName, '(삽입 위치:', insertBefore ? '위' : '아래', ')');
      
      // 1. 사이드바에서 카테고리와 해당 이벤트들 이동
      var sourceEvents = $('.project-item[data-category-index="' + sourceIndex + '"]');
      console.log('이동할 이벤트 수:', sourceEvents.length);
      
      // 카테고리와 이벤트들을 한 번에 이동
      var elementsToMove = sourceCategory.add(sourceEvents);
      
      if (insertBefore) {
        elementsToMove.detach().insertBefore(targetCategory);
      } else {
        // 타겟 카테고리의 마지막 이벤트 찾기
        var targetEvents = $('.project-item[data-category-index="' + targetIndex + '"]');
        if (targetEvents.length > 0) {
          elementsToMove.detach().insertAfter(targetEvents.last());
        } else {
          elementsToMove.detach().insertAfter(targetCategory);
        }
      }
      
      // 2. 타임라인에서 카테고리 행과 이벤트 행들 이동
      reorderTimelineForCategory(sourceName, targetName, insertBefore);
      
      // 3. 라인 높이 업데이트
      setTimeout(function() {
        updateLineHeight();
      }, 50);
      
      console.log('카테고리 순서 변경 완료');
    }
    
    // 타임라인에서 카테고리 순서 변경
    function reorderTimelineForCategory(sourceCategoryName, targetCategoryName, insertBefore) {
      console.log('타임라인 카테고리 순서 변경:', sourceCategoryName, '→', targetCategoryName);
      
      // 1단계: 타임라인에서 카테고리 이름으로 카테고리 행과 이벤트 행들 찾기
      var sourceCategoryRow = $('.timeline-row.category-row[data-category-name="' + sourceCategoryName + '"]');
      var targetCategoryRow = $('.timeline-row.category-row[data-category-name="' + targetCategoryName + '"]');
      var sourceEventRows = $('.timeline-row[data-category-name="' + sourceCategoryName + '"]').not('.category-row');
      var targetEventRows = $('.timeline-row[data-category-name="' + targetCategoryName + '"]').not('.category-row');
      
      console.log('소스 카테고리 행:', sourceCategoryRow.length);
      console.log('소스 이벤트 행 수:', sourceEventRows.length);
      console.log('타겟 카테고리 행:', targetCategoryRow.length);
      console.log('타겟 이벤트 행 수:', targetEventRows.length);
      
      if (sourceCategoryRow.length === 0) {
        console.error('소스 카테고리 행을 찾을 수 없습니다:', sourceCategoryName);
        return;
      }
      
      if (targetCategoryRow.length === 0) {
        console.error('타겟 카테고리 행을 찾을 수 없습니다:', targetCategoryName);
        return;
      }
      
      // 2단계: 행들 이동 (카테고리 행 + 모든 이벤트 행)
      var sourceRows = [sourceCategoryRow[0]].concat(sourceEventRows.toArray());
      
      console.log('이동할 총 행 수:', sourceRows.length);
      
      if (insertBefore) {
        // 타겟 카테고리 위에 삽입 (역순으로 삽입하여 순서 유지)
        for (var i = sourceRows.length - 1; i >= 0; i--) {
          $(sourceRows[i]).detach().insertBefore(targetCategoryRow);
        }
        console.log('타겟 카테고리 위에 삽입 완료');
      } else {
        // 타겟 카테고리의 마지막 이벤트 다음에 삽입
        var insertAfter = targetEventRows.length > 0 ? targetEventRows.last() : targetCategoryRow;
        sourceRows.forEach(function(row) {
          $(row).detach().insertAfter(insertAfter);
          insertAfter = $(row); // 다음 삽입 위치 업데이트
        });
        console.log('타겟 카테고리 뒤에 삽입 완료');
      }
      
      console.log('타임라인 카테고리 순서 변경 완료');
    }
  }

  // 타임라인의 모든 라인 높이 업데이트 함수
  function updateLineHeight() {
    var timelineBody = $('.timeline-body');

    console.log( "updateLineHeight!!" );
    
    if (timelineBody.length > 0) {
      var timelineHeight = timelineBody[0].scrollHeight; // 스크롤 가능한 전체 높이
      
      // today-line 높이 업데이트
      var todayLine = $('.today-line');
      if (todayLine.length > 0) {
        var todayNewHeight = timelineHeight + 50; // top: -50px 보정
        todayLine.css('height', todayNewHeight + 'px');
      }
      
      // date-grid-line 높이 업데이트
      var dateGridLines = $('.date-grid-line');
      if (dateGridLines.length > 0) {
        dateGridLines.css('height', timelineHeight + 'px');
      }
    }
  }

  // RGB 색상을 HEX로 변환하는 함수
  function rgbToHex(rgb) {
    if (!rgb || rgb.indexOf('rgb') !== 0) return rgb;
    
    var rgbMatch = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
    if (!rgbMatch) return rgb;
    
    function hex(x) {
      return ("0" + parseInt(x).toString(16)).slice(-2);
    }
    
    return "#" + hex(rgbMatch[1]) + hex(rgbMatch[2]) + hex(rgbMatch[3]);
  }

  // 스케줄 바 업데이트 함수
  function updateScheduleBar(scheduleBar, scheduleData) {
    var startDate = new Date(scheduleData.start_date);
    var endDate = new Date(scheduleData.end_date);
    var startDateObj = new Date(<%= start_date.to_time.to_i * 1000 %>);
    
    // 위치 계산 - 다른 함수들과 동일한 방식 사용
    var startDayIndex = Math.round((startDate - startDateObj) / (1000 * 60 * 60 * 24));
    var endDayIndex = Math.round((endDate - startDateObj) / (1000 * 60 * 60 * 24));
    var left = startDayIndex * cellWidth;
    var width = (endDayIndex - startDayIndex) * cellWidth;
    
    // 색상 우선순위: 개별 색상 > 카테고리 색상 > 이슈 색상
    var scheduleColor = scheduleData.color;
    var categoryColor = getCategoryColor(currentEditingScheduleBar.categoryName);
    
    // 스케줄 바 스타일 업데이트
    scheduleBar.removeClass(function(index, className) {
      return (className.match(/issue-\S+/g) || []).join(' ');
    });
    scheduleBar.removeClass('custom-color');
    
    if (scheduleColor) {
      // 개별 스케줄 색상 적용
      scheduleBar.addClass('custom-color');
      scheduleBar.css('background-color', scheduleColor);
    } else if (categoryColor) {
      // 카테고리 색상 적용
      scheduleBar.addClass('custom-color');
      scheduleBar.css('background-color', categoryColor);
    } else {
      // 기본 이슈 색상 적용
      scheduleBar.addClass('issue-' + scheduleData.issue);
      scheduleBar.css('background-color', '');
    }
    
    // 위치와 크기 업데이트
    scheduleBar.css({
      left: left + 'px',
      width: width + 'px'
    });
    
    // 텍스트와 title 업데이트
    scheduleBar.find('.project-bar-text').html(scheduleData.name.replace(/\n/g, '<br>'));
    scheduleBar.attr('title', scheduleData.name + ' (' + 
      formatLocalDate(startDate) + ' ~ ' + 
      formatLocalDate(endDate) + ')');
    
    // 이슈 번호를 data 속성으로 저장
    scheduleBar.attr('data-issue-number', scheduleData.issue);
    
    // 기존 이슈 링크 아이콘 제거
    scheduleBar.find('.issue-link-icon').remove();
    
    // 이슈 링크 아이콘 추가 (공통 함수 사용)
    var issueLinkIcon = generateIssueLinkIcon(scheduleData.issue);
    if (issueLinkIcon) {
      scheduleBar.append(issueLinkIcon);
    }
    
    console.log('스케줄 바 업데이트 완료:', scheduleData.name);
    
    // 사이드바 프로젝트 정보 업데이트
    updateProjectInfo(currentEditingScheduleBar.eventName, currentEditingScheduleBar.categoryName);
  }

  // 프로젝트 정보 업데이트 함수 (스케줄 개수만 표시)
  function updateProjectInfo(eventName, categoryName) {
    // 해당 이벤트의 타임라인 행 찾기
    var timelineRow = $('.timeline-row[data-event-name="' + eventName + '"][data-category-name="' + categoryName + '"]');
    if (timelineRow.length === 0) return;
    
    // 스케줄 바들 수집
    var scheduleBars = timelineRow.find('.project-bar');
    var scheduleCount = scheduleBars.length;
    
    var info = scheduleCount + '개 스케줄';
    
    // 사이드바에서 해당 이벤트 찾아서 정보 업데이트
    $('.project-item').each(function() {
      var projectItem = $(this);
      var projectName = projectItem.find('.project-name').text().trim();
      if (projectName === eventName) {
        projectItem.find('.project-info').text(info);
        return false; // 찾았으므로 루프 종료
      }
    });
    
    console.log('프로젝트 정보 업데이트:', eventName, '->', info);
  }

  // currentRoadmapName과 일치하는 탭을 선택하는 함수
  function selectRoadmapTab(roadmapName) {
    // 모든 탭에서 selected 클래스 제거
    $('.roadmap-tab').removeClass('selected');
    
    // 일치하는 탭 찾기
    var targetTab = $('.roadmap-tab[data-roadmap-name="' + roadmapName + '"]');
    
    // 해당 탭이 없으면 첫 번째 탭 선택
    if (targetTab.length === 0) {
      console.warn('탭을 찾을 수 없음:', roadmapName, '- 첫 번째 탭 선택');
      targetTab = $('.roadmap-tab').first();
      if (targetTab.length > 0) {
        var firstRoadmapName = targetTab.data('roadmap-name');
        currentRoadmapName = firstRoadmapName;
        roadmapName = firstRoadmapName;
      }
    }
    
    // 선택된 탭에 selected 클래스 추가
    targetTab.addClass('selected');
    
    console.log('탭 선택됨:', roadmapName);
  }
  
</script>